$date
	Tue Jul 01 19:48:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_tb $end
$var wire 8 ! mem_read_data [7:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 $ reg_we $end
$var wire 4 % pc [3:0] $end
$var wire 4 & operand [3:0] $end
$var wire 4 ' opcode [3:0] $end
$var wire 1 ( mem_we $end
$var wire 8 ) mem_read_data [7:0] $end
$var wire 8 * instr [7:0] $end
$var wire 3 + alu_ctrl [2:0] $end
$scope module cu $end
$var wire 4 , operand [3:0] $end
$var wire 4 - opcode [3:0] $end
$var wire 8 . instr [7:0] $end
$var reg 3 / alu_ctrl [2:0] $end
$var reg 1 ( mem_we $end
$var reg 1 $ reg_we $end
$upscope $end
$scope module dp $end
$var wire 3 0 alu_ctrl [2:0] $end
$var wire 1 " clk $end
$var wire 8 1 mem_read_data [7:0] $end
$var wire 1 ( mem_we $end
$var wire 4 2 opcode [3:0] $end
$var wire 4 3 operand [3:0] $end
$var wire 1 $ reg_we $end
$var wire 3 4 rs2 [2:0] $end
$var wire 3 5 rs1 [2:0] $end
$var wire 8 6 reg_write_data [7:0] $end
$var wire 8 7 reg_out2 [7:0] $end
$var wire 8 8 reg_out1 [7:0] $end
$var wire 3 9 rd [2:0] $end
$var wire 8 : data_out [7:0] $end
$var wire 8 ; alu_result [7:0] $end
$scope module alu_unit $end
$var wire 3 < alu_ctrl [2:0] $end
$var wire 8 = op2 [7:0] $end
$var wire 8 > op1 [7:0] $end
$var reg 8 ? result [7:0] $end
$upscope $end
$scope module mem $end
$var wire 4 @ addr [3:0] $end
$var wire 1 " clk $end
$var wire 8 A read_data [7:0] $end
$var wire 1 ( write_en $end
$var wire 8 B write_data [7:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 " clk $end
$var wire 1 C rd $end
$var wire 3 D rd_addr1 [2:0] $end
$var wire 3 E rd_addr2 [2:0] $end
$var wire 8 F rd_data1 [7:0] $end
$var wire 8 G rd_data2 [7:0] $end
$var wire 1 $ we $end
$var wire 3 H wr_addr [2:0] $end
$var wire 8 I wr_data [7:0] $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 4 J addr [3:0] $end
$var reg 8 K instruction [7:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var reg 4 L pc_out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 L
b0 K
b0 J
b101 I
b0 H
bx G
bx F
b0 E
b0 D
zC
bx B
b101 A
b0 @
bx ?
bx >
bx =
b0 <
bx ;
b101 :
b0 9
bx 8
bx 7
b101 6
b0 5
b0 4
b0 3
b0 2
b101 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b101 )
0(
b0 '
b0 &
b0 %
1$
1#
0"
b101 !
$end
#5000
b101 ;
b101 ?
b101 8
b101 >
b101 B
b101 F
b101 7
b101 =
b101 G
1"
#10000
0"
0#
#15000
bx 7
bx =
bx G
b1 4
b1 E
b10101 6
b10101 I
b10101 !
b10101 )
b10101 1
b10101 :
b10101 A
b1 &
b1 ,
b1 3
b1 @
1$
b1 *
b1 .
b1 K
b1 %
b1 J
b1 L
1"
#20000
0"
#25000
bx 6
bx I
b100 '
b100 -
b100 2
b1 +
b1 /
b1 0
b1 <
1$
bx ;
bx ?
b1000001 *
b1000001 .
b1000001 K
b10101 8
b10101 >
b10101 B
b10101 F
b10 %
b10 J
b10 L
1"
#30000
0"
#35000
b10 4
b10 E
b1 9
b1 H
b11 6
b11 I
b11 !
b11 )
b11 1
b11 :
b11 A
b10 &
b10 ,
b10 3
b10 @
b0 '
b0 -
b0 2
1$
b0 +
b0 /
b0 0
b0 <
b10 *
b10 .
b10 K
bx 8
bx >
bx B
bx F
b11 %
b11 J
b11 L
1"
#40000
0"
#45000
b11 4
b11 E
b11011100 6
b11011100 I
b11011100 !
b11011100 )
b11011100 1
b11011100 :
b11011100 A
b11 &
b11 ,
b11 3
b11 @
1$
b11 *
b11 .
b11 K
b100 %
b100 J
b100 L
1"
#50000
0"
#55000
b11011100 7
b11011100 =
b11011100 G
b1 4
b1 E
b0 9
b0 H
bx 6
bx I
b10101 !
b10101 )
b10101 1
b10101 :
b10101 A
b1 &
b1 ,
b1 3
b1 @
b11 '
b11 -
b11 2
0$
b110001 *
b110001 .
b110001 K
b101 %
b101 J
b101 L
1"
#60000
0"
#65000
b11011100 8
b11011100 >
b11011100 B
b11011100 F
b1 5
b1 D
bx 7
bx =
bx G
b10 4
b10 E
b11 9
b11 H
bx !
bx )
bx 1
bx :
bx A
b110 &
b110 ,
b110 3
b110 @
b100 '
b100 -
b100 2
1$
b1 +
b1 /
b1 0
b1 <
b1000110 *
b1000110 .
b1000110 K
b110 %
b110 J
b110 L
1"
#70000
0"
#75000
b0 4
b0 E
b10 9
b10 H
b11111011 6
b11111011 I
b11011100 ;
b11011100 ?
b11111011 !
b11111011 )
b11111011 1
b11111011 :
b11111011 A
b100 &
b100 ,
b100 3
b100 @
b0 '
b0 -
b0 2
1$
b0 +
b0 /
b0 0
b0 <
b100 *
b100 .
b100 K
b111 %
b111 J
b111 L
1"
#80000
0"
#85000
bx ;
bx ?
bx 8
bx >
bx B
bx F
b0 5
b0 D
b0 9
b0 H
bx 6
bx I
b101 !
b101 )
b101 1
b101 :
b101 A
b0 &
b0 ,
b0 3
b0 @
b101 '
b101 -
b101 2
0$
b1010000 *
b1010000 .
b1010000 K
b1000 %
b1000 J
b1000 L
1"
#90000
0"
#95000
b0x 6
b0x I
b0x ;
b0x ?
b110 '
b110 -
b110 2
1$
b11 +
b11 /
b11 0
b11 <
b1100000 *
b1100000 .
b1100000 K
b1001 %
b1001 J
b1001 L
1"
#100000
0"
#105000
bx 6
bx I
bx ;
bx ?
b11 5
b11 D
b1 4
b1 E
b110 9
b110 H
bx !
bx )
bx 1
bx :
bx A
b1101 &
b1101 ,
b1101 3
b1101 @
b1 '
b1 -
b1 2
1(
0$
b0 +
b0 /
b0 0
b0 <
b11101 *
b11101 .
b11101 K
bx 8
bx >
bx B
bx F
b11011100 7
b11011100 =
b11011100 G
b1010 %
b1010 J
b1010 L
1"
#110000
0"
#115000
b0x 6
b0x I
b0x ;
b0x ?
b0x 8
b0x >
b0x B
b0x F
b0 5
b0 D
b0x 7
b0x =
b0x G
b0 4
b0 E
b0 9
b0 H
b101 !
b101 )
b101 1
b101 :
b101 A
b0 &
b0 ,
b0 3
b0 @
b1111 '
b1111 -
b1111 2
0(
b11110000 *
b11110000 .
b11110000 K
b1011 %
b1011 J
b1011 L
1"
#120000
0"
#125000
b1100 %
b1100 J
b1100 L
1"
#130000
0"
#135000
b1101 %
b1101 J
b1101 L
1"
#140000
0"
#145000
b1110 %
b1110 J
b1110 L
1"
#150000
0"
#155000
b1111 %
b1111 J
b1111 L
1"
#160000
0"
#165000
b101 6
b101 I
b0 '
b0 -
b0 2
1$
b0 *
b0 .
b0 K
b0 %
b0 J
b0 L
1"
#170000
0"
#175000
b1 4
b1 E
b10101 6
b10101 I
b10101 !
b10101 )
b10101 1
b10101 :
b10101 A
b1 &
b1 ,
b1 3
b1 @
1$
b101 ;
b101 ?
b1 *
b1 .
b1 K
b101 8
b101 >
b101 B
b101 F
b11011100 7
b11011100 =
b11011100 G
b1 %
b1 J
b1 L
1"
#180000
0"
#185000
b11110001 6
b11110001 I
b100 '
b100 -
b100 2
b1 +
b1 /
b1 0
b1 <
1$
b11110001 ;
b11110001 ?
b1000001 *
b1000001 .
b1000001 K
b10101 8
b10101 >
b10101 B
b10101 F
b10 %
b10 J
b10 L
1"
#190000
0"
#195000
b11111011 7
b11111011 =
b11111011 G
b10 4
b10 E
b1 9
b1 H
b11 6
b11 I
b11 !
b11 )
b11 1
b11 :
b11 A
b10 &
b10 ,
b10 3
b10 @
b0 '
b0 -
b0 2
1$
b0 +
b0 /
b0 0
b0 <
b11110001 ;
b11110001 ?
b10 *
b10 .
b10 K
b11110001 8
b11110001 >
b11110001 B
b11110001 F
b11 %
b11 J
b11 L
1"
#200000
0"
#205000
bx 7
bx =
bx G
b11 4
b11 E
b11011100 6
b11011100 I
b11011100 !
b11011100 )
b11011100 1
b11011100 :
b11011100 A
b11 &
b11 ,
b11 3
b11 @
1$
b11 *
b11 .
b11 K
b100 %
b100 J
b100 L
1"
#210000
0"
